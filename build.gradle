buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'com.wynprice.cursemaven:CurseMaven:1.2.3'
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.15.1"
    }
}

apply plugin: "com.jfrog.artifactory"
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: "com.wynprice.cursemaven"
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "com.matthewprenger.cursegradle"

repositories {
    maven { url = "http://artifactory.terasology.org/artifactory/virtual-repo-live" }
}

artifactory {
  contextUrl = 'http://artifactory.terasology.org/artifactory/libs-snapshot-local' 
}


version = mod_version
group = "gliby.minecraft.physics"
archivesBaseName = "glibysphysics"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"
    mappings = "snapshot_20171003"
    makeObfSourceJar = false
    replace "@VERSION@", project.version
    replace "@MC_VERSION@", version
}

dependencies {
    compileOnly curse.resolve("dynamic-lights", "2563244")
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.0'
    // compile files('lib/gdx-bullet.jar')
    // compile files('lib/gdx-bullet-natives.jar')
    // compile files('lib/gdx.jar')
    compile(group: 'org.terasology', name: 'TeraMath', version: '1.5.1-20181008.021553-1')
    compile(group: 'org.terasology', name: 'native-bullet', version: '0.2.13-20200106.050344-1')
    compile("com.google.guava:guava:28.2-jre")

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes 'FMLAT': 'GlibysPhysics_at.cfg'
    }
}

// Shading
shadowJar {
    classifier = ''
    relocate 'org.apache.commons.math3', "${project.group}.shadow.org.apache.commons.math3"
}

reobf {
    shadowJar { mappingType = 'SEARGE' }
}

tasks.build.dependsOn reobfShadowJar

artifacts {
    archives shadowJar
    archives sourceJar
}

curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    //noinspection GroovyAssignabilityCheck
    project {
        id = project.projectId
        releaseType = project.curse_type
        changelog = "Changes."
        if (project.hasProperty("curseforge_key")) {
            changelog = getChanges()
            changelogType = "markdown"
        }

        mainArtifact(jar) {
            displayName = String.format("%s %s", getModName(), mod_version)
            logger.lifecycle("Prepared CurseForge artifact: " + displayName)

            relations {
                optionalDependency 'dynamic-lights'
            }
        }
    }
}

def getChanges() {
    String patchNotesDir = '.patchnotes'
    File changesFile = new File(patchNotesDir + File.separator + mod_version + ".MD")
    if (changesFile.exists()) {
        String text = changesFile.getText("UTF-8")
        logger.lifecycle(String.format("Processed changes from %s", patchNotesDir))
        logger.lifecycle(text)
        return text
    }
    return ""
}

def getModName() {
    // Get mod name
    def modInfoLocation = sourceSets.main.resources.srcDirs.iterator().next().toString() + File.separator + "mcmod.info"
    println modInfoLocation
    def modInfo = new File(modInfoLocation)
    if (modInfo.exists()) {
        def parsedJson = new groovy.json.JsonSlurper().parseText(modInfo.getText("UTF-8"))
        return parsedJson.name[0]
    }
    return ""
}

// For users using IntelliJ IDEA
// Quoting Tamaized#7311
// "Forge has an issue with a default setting that came with 2019.2. go to Settings -> Build, Execution, Deployment -> Build Tools -> Gradle: and change build and run to use Intellij not Gradle. This fixes your resources."